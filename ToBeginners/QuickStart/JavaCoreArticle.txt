В статье мы обзорно рассмотрим следующие основные части Java Core:
1. Базовые конструкции
2. Объектно-ориентированное программирование
3. Введение в Swing
4. Обобщённое программирование
5. Коллекции (JFC)
6. Исключения (Exception)
7. Ввод-вывод
8. Многопоточность

1. Базовые конструкции

Если есть опыт программирования на С/C++, то первое знакомство не будет сложным, поскольку базовый синтаксис этих языков очень похож.

Изучение начинается с написания простейшей программы, типа HelloWorld, выводящей в консоль строку приветствия. Вводится понятия класс и метод. Обсуждаются переменные и константы, их типы и основы работы с ними. Массивы. Работа со строками, как объектами, String API. Арифметические и логические операции и выражения. Команды для написания нелинейных программ, включающие в себя: условный оператор if-else, тернарный оператор, оператор множественного выбора switch, циклы с определенным числом повторений for, включая его вариант for each, c неопределенным числом повторений while и do-while. Операторы для изменения порядка выполнения break и continue. Введение в пакетную систему Java, импорт классов, создание объектов, вызов статических и нестатических методов.

Получение навыков по установке и настройке JDK, вызову компилятора и виртуальной машины JVM в командной строке – также относятся к этому разделу.

Материал по этому разделу можно найти в книгах:
- Java. Библиотека профессионала. Том 1, Хорстманн, глава 3
- Java 8. Полное руководство, Шилдт, главы 3, 4, 5

2. Объектно-ориентированное программирование

Объектно-ориентированное программирование (ООП) в настоящее время активно вытесняет “структурные” и “процедурные” подходы, разработанные в 1970-х годах, фактически становясь доминирующей методикой. Java – это объектно-ориентированный язык, и для его продуктивного использования необходимо владеть ООП. Для ООП требуется иной образ мышления по сравнению с подходом, типичным для процедурных языков.

Изучение ООП начинается с рассмотрения класса – элемента, составляющего основу Java. Поля класса содержат данные, методы – код. Методы могут иметь параметры и возвращать значения. Конструкторы – особые методы. Объекты создаются на основании классов. Инкапсуляция – первый принцип ООП подразумевает связывание и сокрытие. Изучаются модификаторы полей и методов: public, protected, private. Вводится понятие перегрузки методов. Затем рассматривается понятия и механизмы наследования и полиморфизма. Уясняется разница между статическими полями и методами и нестатическими. Обсуждаются абстрактные классы и методы, вводится понятие интерфейса.

Материал по этому разделу можно найти в книгах:
- Java. Библиотека профессионала. Том 1, Хорстманн, главы 4, 5, 6
- Java 8. Полное руководство, Шилдт, главы 6, 7, 8

3. Введение в Swing

Swing - это набор классов для создания богатого графического интерфейса пользователя (GUI) для ваших Java программ. В сравнении с ранее использовавшейся библиотекой AWT, библиотека Swing имеет ряд преимуществ, а именно:
- богатый набор интерфейсных примитивов
- настраивающийся внешний вид на различных платформах (look and feel)
- раздельная архитектура модель-вид (model-view)
- встроенная поддержка HTML

Изучение Swing начинается с написания пустого окна на основании класса JFrame. Затем изучается назначение JPanel, JLabel, JButton и других элементов библиотеки java.awt. Размещение элементов с помощью BorderLayout и других компоновщиков. Обработка кликов по кнопке и кликов мыши по элементу. Рисование на JPanel.

Материал по этому разделу можно найти в книгах:
- Java. Библиотека профессионала. Том 1, Хорстманн, главы 10, 11, 12
- Java 8. Полное руководство, Шилдт, главы 31, 32, 33

4. Обобщённое программирование

Обобщения - это параметризованные типы. Такие типы важны, поскольку они позволяют объявлять классы, интерфейсы и методы, где тип данных, которыми они оперируют, указан в виде параметра. Используя обобщения, можно, например, создать единственный класс, который будет правильно обращаться с разнотипными данными. Классы, интерфейсы или методы, оперирующие параметризированными типами, называют обобщёнными.

Обобщения понадобились потому, что они позволяют писать более безопасный код, который легче читается, чем код, перегруженный переменными типа Object и приведениями типов. Обобщения особенно полезны для классов коллекций вроде вездесущего ArrayList.

Материал по этому разделу можно найти в книгах:
- Java. Библиотека профессионала. Том 1, Хорстманн, глава 8
- Java 8. Полное руководство, Шилдт, глава 14

5. Коллекции (JFC)

В пакете java.util содержится библиотека коллекций (collection framework), которая предоставляет большие возможности для работы с множествами, хэш-таблицами, разными видами списков и так далее.

Коллекция - это объект, способный хранить группу одинаковых элементов. Она содержит методы для операций с однородными данными. Основные преимущества классов collection framework (перед классами, разрабатываемыми самостоятельно) заключаются в следующем:

- ускоряется процесс разработки и улучшается качество кода;
- обеспечивается поддержка повторного использования кода;
- производится стандартизация интерфейса ваших классов;
- реализуется поддержка многопоточного доступа.

Основу библиотеки составляют открытые интерфейсы, которые можно использовать для создания собственных коллекций. Каждый интерфейс объявляет набор методов, которые вы обязаны реализовать в своей программе:

- Collection - группа элементов (охватывает Set и List);
- Set - множество элементов (без дублирования);
- SortedSet - то же самое, что Set, только элементы упорядочены;
- List - упорядоченный список;
- Map - словарь, где которой каждый элемент имеет уникальный ключ;
- SortedMap - то же самое, что и Map, однако элементы упорядочены;
- Queue - интерфейс для работы с очередью.

Разумеется, интерфейсы были бы "пустыми", если бы в них не существовало встроенных классов, реализующих необходимые функций:

- ArrayList - список List как массив элементов;
- LinkedList - список List, выполняющий функции связанного списка;
- HashSet - множество Set как хэш-таблица;
- TreeSet - множество SortedSet, используемое как дерево;
- HashMap - индексированный словарь хэш;
- TreeMap - коллекция SortedMap древовидной структуры.

Материал по этому разделу можно найти в книгах:
- Java. Библиотека профессионала. Том 1, Хорстманн, глава 9
- Java 8. Полное руководство, Шилдт, глава 18

6. Исключения (Exception)

В мире программирования возникновение ошибок и непредвиденных ситуаций при выполнении программы называют исключением. В программе исключения могут возникать в результате неправильных действий пользователя, отсутствии необходимого ресурса на диске, или потери соединения с сервером по сети. Причинами исключений при выполнении программы также могут быть ошибки программирования или неправильное использование API. Ваша программа должна четко знать, как поступать в такой ситуации. Для этого в Java предусмотрен механизм исключений.

При возникновении ошибки в процессе выполнения программы JVM создает объект нужного типа из иерархии исключений Java – множества возможных исключительных ситуаций, унаследованных от общего «предка» – класса Throwable. Исключение можно также создать вручную, с помощью оператора throw. При этом выполнение основного кода программы прерывается, а обработчик исключений JVM пытается найти способ обработать исключение.

Создание блоков кода, для которых предусмотрена обработку исключений в Java, производится с помощью конструкций try{}catch, try{}catch{}finally, try{}finally{}.

При возбуждении исключения в блоке try обработчик исключения ищется в следующем за ним блоке catch. Если в catch есть обработчик данного типа исключения – управление переходит к нему. Если нет, то JVM ищет обработчик этого типа исключения в цепочке вызовов методов до тех пор, пока не будет найден подходящий catch. 

После выполнения блока catch управление передается в необязательный блок finally. В случае, если подходящий блок catch не найден, JVM останавливает выполнение программы, и выводит стек вызовов методов – stack trace, выполнив перед этим код блока finally при его наличии.

Материал по этому разделу можно найти в книгах:
- Java. Библиотека профессионала. Том 1, Хорстманн, глава 7
- Java 8. Полное руководство, Шилдт, глава 10

7. Потоки ввода-вывода

В Java основной функционал работы с потоками ввода-вывода сосредоточен в классах из пакета java.io.

Ключевым здесь является понятие потока. В программировании это довольно перегружено и может обозначать множество различных концепций. В данном случае применительно к работе с файлами и вводом-выводом мы говорим о потоке (stream), как об абстракции, которая используется для чтения или записи информации (файлов, сокетов, текста консоли и т.д.).

Поток связан с реальным физическим устройством с помощью системы ввода-вывода Java. У нас может быть определен поток, который связан с файлом и через который мы можем вести чтение или запись файла. Это также может быть поток, связанный с сетевым сокетом, с помощью которого можно получить или отправить данные в сети. Все эти задачи: чтение и запись различных файлов, обмен информацией по сети, ввод-ввывод в консоли решаются в Java с помощью потоков.

Объект, из которого можно считать данные, называется потоком ввода, а объект, в который можно записывать данные, - потоком вывода. Например, если надо считать содержание файла, то применяется поток ввода, а если надо записать в файл - то поток вывода.

Материал по этому разделу можно найти в книгах:
- Java. Библиотека профессионала. Том 1, Хорстманн, глава ...
- Java 8. Полное руководство, Шилдт, главы 13, 20, 21

8. Многопоточность

Материал по этому разделу можно найти в книгах:
- Java. Библиотека профессионала. Том 1, Хорстманн, глава 14
- Java 8. Полное руководство, Шилдт, глава 11
